***********************************************************************
*
*	CODE GENERATION LISTING FOR: Alkin W32 Compressor Control
*	COMPILER VERSION: 5.22.0.18
*
***********************************************************************

**************************************************
	CODE GENERATOR SUBROUTINES
**************************************************

$$MOD:
300000B0  FB90 F3F1		sdiv r3, r0, r1
300000B4  4359     		mul r1, r1, r3
300000B6  EBC1 0000		rsb r0, r1, r0
300000BA  4770     		bx lr

$$MOD_U:
300000BC  FBB0 F3F1		udiv r3, r0, r1
300000C0  4359     		mul r1, r1, r3
300000C2  EBC1 0000		rsb r0, r1, r0
300000C6  4770     		bx lr

**************************************************
	List function block: TOF
**************************************************

FUNCTION_BLOCK TOF

	{ DE:"<HTML>The TOF block produces a delayed de-activation of the output Q with respect of the input IN. The delay time is expressed in milliseconds on the PT input.</br></br>
<img src= tofscheme.png>
<ul>
<li>if IN is TRUE then Q is TRUE</li>
<li>Q becomes FALSE after PT milliseconds from IN becomes FALSE</li>
<li>Q remains FALSE until IN remains FALSE</li>
</ul>" }

        VAR_INPUT
IN : BOOL;	{ DE:"Timer input source" }
PT : UDINT;	{ DE:"Preset time value (ms)" }
	END_VAR

        VAR_OUTPUT
Q : BOOL;	{ DE:"Timer output" }
ET : UDINT;	{ DE:"Timer current value (ms)" }
	END_VAR

        VAR_EXTERNAL
	{G:"System_Timers"}
sysTimer AT %MD60000.0 : UDINT;	{ DE:"System timer [ms]" }
	END_VAR

        VAR
timStart : UDINT;	{ DE:"Time value at start of counting" }
	END_VAR

END_FUNCTION_BLOCK

300000C8  E92D 4040		stmdb sp!, { r6, lr }
300000CC  462E     		mov r6, r5

#0		{SRC:TOF}
#1		
#2			(*	Check if in counting	*)
#3		
#4			LD		IN
(-) UNDEF
300000CE  7930     		ldrb r0, [r6, #4]

#5			JMPC	lReset
(-) BOOL
300000D0  2800     		cmp r0, #0
300000D2  D130     		bne #96 ; 0x30000136


#6		
#7			(*	Check if falling edge of IN	*)
#8			LD		Q
(-) UNDEF
300000D6  7B30     		ldrb r0, [r6, #12]

#9			RETCN
#10		
(-) BOOL
300000D8  2800     		cmp r0, #0
300000DA  D031     		beq #98 ; 0x30000140


#11			(*	Check if already in counting *)
#12			LD		timStart
(-) UNDEF
300000DE  6830     		ldr r0, [r6]

#13			EQ		0
(*) UDINT
300000E0  2800     		cmp r0, #0
300000E2  BF18 2000		nemov r0, #0
300000E6  BF08 2001		eqmov r0, #1

#14			JMPCN	lUpdate
(-) BOOL
300000EA  2800     		cmp r0, #0
300000EC  D004     		beq #8 ; 0x300000F8


#15			
#16			(*	Start of counting *)
#17			LD		sysTimer
(*) UNDEF
300000F0  F8DF 7054		ldr r7, [pc, #+84] ; 0x2403C680
300000F4  6838     		ldr r0, [r7]

#18			ST		timStart
(-) UDINT
300000F6  6030     		str r0, [r6]

#19		
#20		lUpdate:
#21			
#22			(*	Update timer and check if time elapsed *)
#23			LD		sysTimer
(*) UNDEF
300000F8  F8DF 704C		ldr r7, [pc, #+76] ; 0x2403C680
300000FC  6838     		ldr r0, [r7]

#24			SUB		timStart
(*) UDINT
300000FE  6837     		ldr r7, [r6]
30000100  1BC0     		sub r0, r0, r7

#25			ST		ET
(-) UDINT
30000102  6130     		str r0, [r6, #16]

#26			GE		PT
(*) UDINT
30000104  68B7     		ldr r7, [r6, #8]
30000106  42B8     		cmp r0, r7
30000108  BF38 2000		lomov r0, #0
3000010C  BF28 2001		hsmov r0, #1

#27			STN		Q
(*) BOOL
30000110  B082     		sub sp, sp, #8
30000112  F8CD 0000		str r0, [sp]
30000116  2800     		cmp r0, #0
30000118  BF08 2001		eqmov r0, #1
3000011C  BF18 2000		nemov r0, #0
30000120  7330     		strb r0, [r6, #12]
30000122  F8DD 0000		ldr r0, [sp]
30000126  B002     		add sp, sp, #8

#28			RETCN
#29			
(-) BOOL
30000128  2800     		cmp r0, #0
3000012A  D009     		beq #18 ; 0x30000140


#30			(*	Limit actual time value *)
#31			LD		PT
(-) UNDEF
3000012E  68B0     		ldr r0, [r6, #8]

#32			ST		ET
(-) UDINT
30000130  6130     		str r0, [r6, #16]

#33			RET
#34		
(-) UDINT
30000132  E005     		b #10 ; 0x30000140


#35		lReset:
#36		
#37			(*	Reset status *)
#38			LD		0
(-) UNDEF
30000136  2000     		mov r0, #0 ; 0

#39			ST		ET
(-) USINT
30000138  6130     		str r0, [r6, #16]

#40			ST		timStart
(-) UDINT
3000013A  6030     		str r0, [r6]

#41			LD		TRUE
(-) UNDEF
3000013C  2001     		mov r0, #1 ; 1

#42			ST		Q
(-) BOOL
3000013E  7330     		strb r0, [r6, #12]

30000140  E8BD 4040		ldmia sp!, { r6, lr }

30000144  4770     		bx lr

30000148  FFFFFFFF		; 0x2403C680


Frame allocation:

	0000       : VAR timStart
	0004 bit  0: VAR IN
	0008       : VAR PT
	000C bit  0: VAR Q
	0010       : VAR ET

END_FUNCTION_BLOCK
**************************************************
	List function block: TON
**************************************************

FUNCTION_BLOCK TON

	{ DE:"<HTML>The TON block produces a delayed output Q of the input IN. The delay time is expressed in milliseconds on the PT input.</br></br>
<img src= tonscheme.png>
<ul>
<li>if IN is FALSE Q is false</li>
<li>Q becomes TRUE as IN remains TRUE for PT milliseconds</li>
<li>Q remains TRUE until IN remains TRUE</li>
</ul>" }

        VAR_INPUT
IN : BOOL;	{ DE:"Timer input source" }
PT : UDINT;	{ DE:"Preset time value (ms)" }
	END_VAR

        VAR_OUTPUT
Q : BOOL;	{ DE:"Timer output" }
ET : UDINT;	{ DE:"Timer current value (ms)" }
	END_VAR

        VAR_EXTERNAL
	{G:"System_Timers"}
sysTimer AT %MD60000.0 : UDINT;	{ DE:"System timer [ms]" }
	END_VAR

        VAR
timStart : UDINT;	{ DE:"Time value at start of counting" }
	END_VAR

END_FUNCTION_BLOCK

3000014C  E92D 4040		stmdb sp!, { r6, lr }
30000150  462E     		mov r6, r5

#0		{SRC:TON}
#1		
#2			(*	Check if in counting	*)
#3		
#4			LD		IN
(-) UNDEF
30000152  7930     		ldrb r0, [r6, #4]

#5			JMPCN	lReset
(-) BOOL
30000154  2800     		cmp r0, #0
30000156  D025     		beq #74 ; 0x300001A4


#6		
#7			(*	Check if Q is TRUE *)
#8			LD		Q
(-) UNDEF
3000015A  7B30     		ldrb r0, [r6, #12]

#9			RETC
#10			
(-) BOOL
3000015C  2800     		cmp r0, #0
3000015E  D126     		bne #76 ; 0x300001AE


#11			(*	Check if already in counting *)
#12			LD		timStart
(-) UNDEF
30000162  6830     		ldr r0, [r6]

#13			EQ		0
(*) UDINT
30000164  2800     		cmp r0, #0
30000166  BF18 2000		nemov r0, #0
3000016A  BF08 2001		eqmov r0, #1

#14			JMPCN	lUpdate
(-) BOOL
3000016E  2800     		cmp r0, #0
30000170  D004     		beq #8 ; 0x3000017C


#15		
#16			(*	Start of counting *)
#17			LD		sysTimer
(*) UNDEF
30000174  F8DF 703C		ldr r7, [pc, #+60] ; 0x2403C680
30000178  6838     		ldr r0, [r7]

#18			ST		timStart
(-) UDINT
3000017A  6030     		str r0, [r6]

#19			
#20		lUpdate:
#21		
#22			(*	Update timer and check if time elapsed *)
#23			LD		sysTimer
(*) UNDEF
3000017C  F8DF 7034		ldr r7, [pc, #+52] ; 0x2403C680
30000180  6838     		ldr r0, [r7]

#24			SUB		timStart
(*) UDINT
30000182  6837     		ldr r7, [r6]
30000184  1BC0     		sub r0, r0, r7

#25			ST		ET
(-) UDINT
30000186  6130     		str r0, [r6, #16]

#26			GE		PT
(*) UDINT
30000188  68B7     		ldr r7, [r6, #8]
3000018A  42B8     		cmp r0, r7
3000018C  BF38 2000		lomov r0, #0
30000190  BF28 2001		hsmov r0, #1

#27			ST		Q
(-) BOOL
30000194  7330     		strb r0, [r6, #12]

#28			RETCN
#29		
(-) BOOL
30000196  2800     		cmp r0, #0
30000198  D009     		beq #18 ; 0x300001AE


#30			(*	Limit actual time value *)
#31			LD		PT
(-) UNDEF
3000019C  68B0     		ldr r0, [r6, #8]

#32			ST		ET
(-) UDINT
3000019E  6130     		str r0, [r6, #16]

#33			RET
#34		
(-) UDINT
300001A0  E005     		b #10 ; 0x300001AE


#35		lReset:
#36		
#37			(*	Reset status *)
#38			LD		0
(-) UNDEF
300001A4  2000     		mov r0, #0 ; 0

#39			ST		ET
(-) USINT
300001A6  6130     		str r0, [r6, #16]

#40			ST		timStart
(-) UDINT
300001A8  6030     		str r0, [r6]

#41			LD		FALSE
(-) UNDEF
300001AA  2000     		mov r0, #0 ; 0

#42			ST		Q
(-) BOOL
300001AC  7330     		strb r0, [r6, #12]

300001AE  E8BD 4040		ldmia sp!, { r6, lr }

300001B2  4770     		bx lr

300001B4  FFFFFFFF		; 0x2403C680


Frame allocation:

	0000       : VAR timStart
	0004 bit  0: VAR IN
	0008       : VAR PT
	000C bit  0: VAR Q
	0010       : VAR ET

END_FUNCTION_BLOCK
**************************************************
	List program: main
**************************************************

PROGRAM main

END_PROGRAM

300001C0  B082     		sub sp, sp, #8
300001C2  F8CD E000		str lr, [sp]
300001C6  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

#0		{SRC:main}
#1		(*$WAITSWITCH$*)
#2		
#3			(* cnt := cnt + 1; *)
#4			LD		cnt	{LNXT:2|2|-1}
(*) UNDEF
300001CA  F8DF 7010		ldr r7, [pc, #+16] ; 0x24002C4C
300001CE  F9B7 0000		ldrsh r0, [r7]

#5			ADD		1	{LNXT:2|2|-1}
(-) INT
300001D2  1C40     		add r0, r0, #1

#6			ST		cnt	{LNXT:2|2|-1}
(*) INT
300001D4  F8DF 7004		ldr r7, [pc, #+4] ; 0x24002C4C
300001D8  8038     		strh r0, [r7]

300001DA  E001     		b #2

300001DC  24002C4C		; 0x24002C4C

END_PROGRAM
**************************************************
	List program: Ladder
**************************************************

PROGRAM Ladder

        VAR
Low_Oil_Fault : BOOL;
Motor_OL_Fault : BOOL;
Motor_Temp_Fault : BOOL;
E_Stop_Fault : BOOL;
ACD_Cycle_Start : TON;	{ DE:"ACD Cycle" }
ACD_Vent_Open : TON;	{ DE:"ACD Vent Open" }
Oil_Pres_Delay : TON;
Flash : BOOL;
Motor_Standby : BOOL;
Flasher : TON;
Flasher_Off : TON;
Blink_Rate : UINT;
Fault_Mode : BOOL;
Shutdown_Reset : TON;
BlinkOff_Rate : INT;
ACD_Startup : TON;
ACD_Starter : TOF;
	END_VAR

        VAR CONSTANT
ACD_Open : INT := 30000;	{ DE:"Duration of ACD Venting (ms)" }
ACD_Cycle : UDINT := 300000;	{ DE:"Duration of ACD Vent Cycle (ms)" }
	END_VAR

END_PROGRAM

#0			{SRC:Ladder}
#1		 
#2		  
#3			(* Network 1 *)
#4		Fill_Cycle:
#5			LD		START {R:1$17}
(*) UNDEF
300001E0  F8DF 75AC		ldr r7, [pc, #+1452] ; 0x2403D74A
300001E4  7838     		ldrb r0, [r7]

#6			OR		MOTOR {R:1$110}
(*) BOOL
300001E6  F8DF 75C4		ldr r7, [pc, #+1476] ; 0x2403D759
300001EA  783F     		ldrb r7, [r7]
300001EC  4338     		orr r0, r0, r7

#7			OR		MOTOR_STANDBY {R:1$114}
(*) BOOL
300001EE  F8DF 74EC		ldr r7, [pc, #+1260] ; 0x24002BC7
300001F2  783F     		ldrb r7, [r7]
300001F4  4338     		orr r0, r0, r7

#8			AND		EMERGENCY_STOP {R:1$95}
(*) BOOL
300001F6  F8DF 759C		ldr r7, [pc, #+1436] ; 0x2403D74C
300001FA  783F     		ldrb r7, [r7]
300001FC  4038     		and r0, r0, r7

#9			AND		STOP {R:1$98}
(*) BOOL
300001FE  F8DF 758C		ldr r7, [pc, #+1420] ; 0x2403D748
30000202  783F     		ldrb r7, [r7]
30000204  4038     		and r0, r0, r7

#10			AND		PRESSURE_SENSOR {R:1$108}
(*) BOOL
30000206  F8DF 7590		ldr r7, [pc, #+1424] ; 0x2403D74E
3000020A  783F     		ldrb r7, [r7]
3000020C  4038     		and r0, r0, r7

#11			ANDN		LOW_OIL_FAULT {R:1$77}
(*) BOOL
3000020E  F8DF 74C8		ldr r7, [pc, #+1224] ; 0x24002BC6
30000212  783F     		ldrb r7, [r7]
30000214  2F00     		cmp r7, #0
30000216  BF08 2701		eqmov r7, #1
3000021A  BF18 2700		nemov r7, #0
3000021E  4038     		and r0, r0, r7

#12			ANDN		MOTOR_OL_FAULT {R:1$91}
(*) BOOL
30000220  F8DF 74BC		ldr r7, [pc, #+1212] ; 0x24002BCC
30000224  783F     		ldrb r7, [r7]
30000226  2F00     		cmp r7, #0
30000228  BF08 2701		eqmov r7, #1
3000022C  BF18 2700		nemov r7, #0
30000230  4038     		and r0, r0, r7

#13			ANDN		MOTOR_TEMP_FAULT {R:1$92}
(*) BOOL
30000232  F8DF 74B0		ldr r7, [pc, #+1200] ; 0x24002BCD
30000236  783F     		ldrb r7, [r7]
30000238  2F00     		cmp r7, #0
3000023A  BF08 2701		eqmov r7, #1
3000023E  BF18 2700		nemov r7, #0
30000242  4038     		and r0, r0, r7

#14			ST		MOTOR {R:1$1}
(*) BOOL
30000244  F8DF 7564		ldr r7, [pc, #+1380] ; 0x2403D759
30000248  7038     		strb r0, [r7]

#15		 
#16			(* Network 2 *)
#17			LD		START {R:2$0}
(*) UNDEF
3000024A  F8DF 7544		ldr r7, [pc, #+1348] ; 0x2403D74A
3000024E  7838     		ldrb r0, [r7]

#18			ST		ACD_STARTER.IN {R:2$4}
(*) BOOL
30000250  F8DF 7510		ldr r7, [pc, #+1296] ; 0x24002C68
30000254  7038     		strb r0, [r7]

#19			MOVE		10000,ACD_STARTER.PT {R:2$4}
(*) BOOL
30000256  F8DF 7474		ldr r7, [pc, #+1140] ; 0x2710
3000025A  4638     		mov r0, r7
3000025C  F8DF 7508		ldr r7, [pc, #+1288] ; 0x24002C6C
30000260  6038     		str r0, [r7]

#20			CAL		ACD_STARTER {R:2$4}
(*) UDINT
30000262  E92D 0021		stmdb sp!, { r0, r5 }
30000266  F8DF 54F8		ldr r5, [pc, #+1272] ; 0x24002C64
3000026A  F8DF 4550		ldr r4, [pc, #+1360] ; 0x300000C8
3000026E  F044 0401		orr r4, r4, #1
30000272  47A0     		blx r4
30000274  E8BD 0021		ldmia sp!, { r0, r5 }

#21			LD		ACD_STARTER.Q {R:2$4}
(*) UNDEF
30000278  F8DF 74F0		ldr r7, [pc, #+1264] ; 0x24002C70
3000027C  7838     		ldrb r0, [r7]

#22			ST		ACD {R:2$1}
(*) BOOL
3000027E  F8DF 7530		ldr r7, [pc, #+1328] ; 0x2403D75A
30000282  7038     		strb r0, [r7]

#23		 
#24			(* Network 3 *)
#25		Condensate:
#26			LD		MOTOR {R:3$178}
(*) UNDEF
30000284  F8DF 7524		ldr r7, [pc, #+1316] ; 0x2403D759
30000288  7838     		ldrb r0, [r7]

#27			AND		ACD {R:3$179}
(*) BOOL
3000028A  F8DF 7524		ldr r7, [pc, #+1316] ; 0x2403D75A
3000028E  783F     		ldrb r7, [r7]
30000290  4038     		and r0, r0, r7

#28			ST		ACD_CYCLE_START.IN {R:3$119}
(*) BOOL
30000292  F8DF 745C		ldr r7, [pc, #+1116] ; 0x24002BD4
30000296  7038     		strb r0, [r7]

#29			MOVE		ACD_CYCLE,ACD_CYCLE_START.PT {R:3$119}
(*) BOOL
30000298  F8DF 7438		ldr r7, [pc, #+1080] ; 0x493E0
3000029C  4638     		mov r0, r7
3000029E  F8DF 7454		ldr r7, [pc, #+1108] ; 0x24002BD8
300002A2  6038     		str r0, [r7]

#30			CAL		ACD_CYCLE_START {R:3$119}
(*) UDINT
300002A4  E92D 0021		stmdb sp!, { r0, r5 }
300002A8  F8DF 5440		ldr r5, [pc, #+1088] ; 0x24002BD0
300002AC  F8DF 4510		ldr r4, [pc, #+1296] ; 0x3000014C
300002B0  F044 0401		orr r4, r4, #1
300002B4  47A0     		blx r4
300002B6  E8BD 0021		ldmia sp!, { r0, r5 }

#31			LD		ACD_CYCLE_START.Q {R:3$119}
(*) UNDEF
300002BA  F8DF 743C		ldr r7, [pc, #+1084] ; 0x24002BDC
300002BE  7838     		ldrb r0, [r7]

#32			R		ACD {R:3$54}
(*) BOOL
300002C0  2800     		cmp r0, #0
300002C2  D009     		beq #0x000012
300002C4  B082     		sub sp, sp, #8
300002C6  F8CD 0000		str r0, [sp]
300002CA  2000     		mov r0, #0
300002CC  F8DF 74E0		ldr r7, [pc, #+1248] ; 0x2403D75A
300002D0  7038     		strb r0, [r7]
300002D2  F8DD 0000		ldr r0, [sp]
300002D6  B002     		add sp, sp, #8

#33		 
#34			(* Network 4 *)
#35		Condensate_Vent:
#36			LD		MOTOR {R:4$175}
(*) UNDEF
300002D8  F8DF 74D0		ldr r7, [pc, #+1232] ; 0x2403D759
300002DC  7838     		ldrb r0, [r7]

#37			ANDN		ACD {R:4$176}
(*) BOOL
300002DE  F8DF 74D0		ldr r7, [pc, #+1232] ; 0x2403D75A
300002E2  783F     		ldrb r7, [r7]
300002E4  2F00     		cmp r7, #0
300002E6  BF08 2701		eqmov r7, #1
300002EA  BF18 2700		nemov r7, #0
300002EE  4038     		and r0, r0, r7

#38			ST		ACD_VENT_OPEN.IN {R:4$135}
(*) BOOL
300002F0  F8DF 740C		ldr r7, [pc, #+1036] ; 0x24002BE8
300002F4  7038     		strb r0, [r7]

#39			MOVE		ACD_OPEN,ACD_VENT_OPEN.PT {R:4$135}
(*) BOOL
300002F6  F8DF 73D8		ldr r7, [pc, #+984] ; 0x7530
300002FA  4638     		mov r0, r7
300002FC  F8DF 7404		ldr r7, [pc, #+1028] ; 0x24002BEC
30000300  6038     		str r0, [r7]

#40			CAL		ACD_VENT_OPEN {R:4$135}
(*) UDINT
30000302  E92D 0021		stmdb sp!, { r0, r5 }
30000306  F8DF 53F4		ldr r5, [pc, #+1012] ; 0x24002BE4
3000030A  F8DF 44B4		ldr r4, [pc, #+1204] ; 0x3000014C
3000030E  F044 0401		orr r4, r4, #1
30000312  47A0     		blx r4
30000314  E8BD 0021		ldmia sp!, { r0, r5 }

#41			LD		ACD_VENT_OPEN.Q {R:4$135}
(*) UNDEF
30000318  F8DF 73EC		ldr r7, [pc, #+1004] ; 0x24002BF0
3000031C  7838     		ldrb r0, [r7]

#42			S		ACD {R:4$62}
(*) BOOL
3000031E  2800     		cmp r0, #0
30000320  D009     		beq #0x000012
30000322  B082     		sub sp, sp, #8
30000324  F8CD 0000		str r0, [sp]
30000328  2001     		mov r0, #1
3000032A  F8DF 7484		ldr r7, [pc, #+1156] ; 0x2403D75A
3000032E  7038     		strb r0, [r7]
30000330  F8DD 0000		ldr r0, [sp]
30000334  B002     		add sp, sp, #8

#43		 
#44			(* Network 5 *)
#45		Motor_Overload:
#46			LD		MOTOR_OL {R:5$19}
(*) UNDEF
30000336  F8DF 746C		ldr r7, [pc, #+1132] ; 0x2403D754
3000033A  7838     		ldrb r0, [r7]

#47			JMPCN	$$LAB$1
(-) BOOL
3000033C  2800     		cmp r0, #0
3000033E  D005     		beq #10 ; 0x3000034C


#48			LD		300 {R:5$89}
(*) UNDEF
30000342  F44F 7096		mov r0, #300 ; 300

#49			ST		BLINK_RATE {R:5$88}
(*) UINT
30000346  F8DF 73A0		ldr r7, [pc, #+928] ; 0x24002BCE
3000034A  8038     		strh r0, [r7]

#50		$$LAB$1:
#51			LD		MOTOR_OL
(*) UNDEF
3000034C  F8DF 7454		ldr r7, [pc, #+1108] ; 0x2403D754
30000350  7838     		ldrb r0, [r7]

#52			S		MOTOR_OL_FAULT {R:5$80}
(*) BOOL
30000352  2800     		cmp r0, #0
30000354  D009     		beq #0x000012
30000356  B082     		sub sp, sp, #8
30000358  F8CD 0000		str r0, [sp]
3000035C  2001     		mov r0, #1
3000035E  F8DF 7380		ldr r7, [pc, #+896] ; 0x24002BCC
30000362  7038     		strb r0, [r7]
30000364  F8DD 0000		ldr r0, [sp]
30000368  B002     		add sp, sp, #8

#53		 
#54			(* Network 6 *)
#55		E_Stop:
#56			LDN		EMERGENCY_STOP {R:6$19}
(*) UNDEF
3000036A  F8DF 7428		ldr r7, [pc, #+1064] ; 0x2403D74C
3000036E  7838     		ldrb r0, [r7]
30000370  2800     		cmp r0, #0
30000372  BF08 2001		eqmov r0, #1
30000376  BF18 2000		nemov r0, #0

#57			ST		$$VAR$1
(*) BOOL
3000037A  F8DF 7390		ldr r7, [pc, #+912] ; 0x24002BF8
3000037E  7038     		strb r0, [r7]

#58			JMPCN	$$LAB$2
(-) BOOL
30000380  2800     		cmp r0, #0
30000382  D006     		beq #12 ; 0x30000392


#59			LD		10000 {R:6$89}
(*) UNDEF
30000386  F8DF 7344		ldr r7, [pc, #+836] ; 0x2710
3000038A  4638     		mov r0, r7

#60			ST		BLINK_RATE {R:6$88}
(*) UINT
3000038C  F8DF 7358		ldr r7, [pc, #+856] ; 0x24002BCE
30000390  8038     		strh r0, [r7]

#61		$$LAB$2:
#62			LD		$$VAR$1
(*) UNDEF
30000392  F8DF 7378		ldr r7, [pc, #+888] ; 0x24002BF8
30000396  7838     		ldrb r0, [r7]

#63		 
#64			(* Network 7 *)
#65		Motor_Temp:
#66			LD		TEMP_SENSOR {R:7$19}
(*) UNDEF
30000398  F8DF 7404		ldr r7, [pc, #+1028] ; 0x2403D752
3000039C  7838     		ldrb r0, [r7]

#67			JMPCN	$$LAB$3
(-) BOOL
3000039E  2800     		cmp r0, #0
300003A0  D005     		beq #10 ; 0x300003AE


#68			LD		2000 {R:7$89}
(*) UNDEF
300003A4  F44F 60FA		mov r0, #2000 ; 2000

#69			ST		BLINK_RATE {R:7$88}
(*) UINT
300003A8  F8DF 733C		ldr r7, [pc, #+828] ; 0x24002BCE
300003AC  8038     		strh r0, [r7]

#70		$$LAB$3:
#71			LD		TEMP_SENSOR
(*) UNDEF
300003AE  F8DF 73F0		ldr r7, [pc, #+1008] ; 0x2403D752
300003B2  7838     		ldrb r0, [r7]

#72			S		MOTOR_TEMP_FAULT {R:7$80}
(*) BOOL
300003B4  2800     		cmp r0, #0
300003B6  D009     		beq #0x000012
300003B8  B082     		sub sp, sp, #8
300003BA  F8CD 0000		str r0, [sp]
300003BE  2001     		mov r0, #1
300003C0  F8DF 7320		ldr r7, [pc, #+800] ; 0x24002BCD
300003C4  7038     		strb r0, [r7]
300003C6  F8DD 0000		ldr r0, [sp]
300003CA  B002     		add sp, sp, #8

#73		 
#74			(* Network 8 *)
#75		Oil_Monitor:
#76			LD		MOTOR {R:8$21}
(*) UNDEF
300003CC  F8DF 73DC		ldr r7, [pc, #+988] ; 0x2403D759
300003D0  7838     		ldrb r0, [r7]

#77			ST		OIL_PRES_DELAY.IN {R:8$59}
(*) BOOL
300003D2  F8DF 734C		ldr r7, [pc, #+844] ; 0x24002C00
300003D6  7038     		strb r0, [r7]

#78			MOVE		5000,OIL_PRES_DELAY.PT {R:8$59}
(*) BOOL
300003D8  F8DF 72EC		ldr r7, [pc, #+748] ; 0x1388
300003DC  4638     		mov r0, r7
300003DE  F8DF 7344		ldr r7, [pc, #+836] ; 0x24002C04
300003E2  6038     		str r0, [r7]

#79			CAL		OIL_PRES_DELAY {R:8$59}
(*) UDINT
300003E4  E92D 0021		stmdb sp!, { r0, r5 }
300003E8  F8DF 5330		ldr r5, [pc, #+816] ; 0x24002BFC
300003EC  F8DF 43D0		ldr r4, [pc, #+976] ; 0x3000014C
300003F0  F044 0401		orr r4, r4, #1
300003F4  47A0     		blx r4
300003F6  E8BD 0021		ldmia sp!, { r0, r5 }

#80			LD		OIL_PRES_DELAY.Q {R:8$59}
(*) UNDEF
300003FA  F8DF 732C		ldr r7, [pc, #+812] ; 0x24002C08
300003FE  7838     		ldrb r0, [r7]

#81			AND		LOW_OIL {R:8$19}
(*) BOOL
30000400  F8DF 7398		ldr r7, [pc, #+920] ; 0x2403D750
30000404  783F     		ldrb r7, [r7]
30000406  4038     		and r0, r0, r7

#82			ST		$$VAR$1
(*) BOOL
30000408  F8DF 7300		ldr r7, [pc, #+768] ; 0x24002BF8
3000040C  7038     		strb r0, [r7]

#83			JMPCN	$$LAB$4
(-) BOOL
3000040E  2800     		cmp r0, #0
30000410  D005     		beq #10 ; 0x3000041E


#84			LD		1000 {R:8$82}
(*) UNDEF
30000414  F44F 707A		mov r0, #1000 ; 1000

#85			ST		BLINK_RATE {R:8$83}
(*) UINT
30000418  F8DF 72CC		ldr r7, [pc, #+716] ; 0x24002BCE
3000041C  8038     		strh r0, [r7]

#86		$$LAB$4:
#87			LD		$$VAR$1
(*) UNDEF
3000041E  F8DF 72EC		ldr r7, [pc, #+748] ; 0x24002BF8
30000422  7838     		ldrb r0, [r7]

#88			S		LOW_OIL_FAULT {R:8$77}
(*) BOOL
30000424  2800     		cmp r0, #0
30000426  D009     		beq #0x000012
30000428  B082     		sub sp, sp, #8
3000042A  F8CD 0000		str r0, [sp]
3000042E  2001     		mov r0, #1
30000430  F8DF 72A4		ldr r7, [pc, #+676] ; 0x24002BC6
30000434  7038     		strb r0, [r7]
30000436  F8DD 0000		ldr r0, [sp]
3000043A  B002     		add sp, sp, #8

#89		 
#90			(* Network 9 *)
#91		Manual_Override:
#92			LDN		STOP {R:9$0}
(*) UNDEF
3000043C  F8DF 734C		ldr r7, [pc, #+844] ; 0x2403D748
30000440  7838     		ldrb r0, [r7]
30000442  2800     		cmp r0, #0
30000444  BF08 2001		eqmov r0, #1
30000448  BF18 2000		nemov r0, #0

#93			OR		USER_BUTTON {R:9$25}
(*) BOOL
3000044C  F8DF 7358		ldr r7, [pc, #+856] ; 0x2403D758
30000450  783F     		ldrb r7, [r7]
30000452  4338     		orr r0, r0, r7

#94			ST		SHUTDOWN_RESET.IN {R:9$14}
(*) BOOL
30000454  F8DF 72D8		ldr r7, [pc, #+728] ; 0x24002C14
30000458  7038     		strb r0, [r7]

#95			MOVE		2000,SHUTDOWN_RESET.PT {R:9$14}
(*) BOOL
3000045A  F44F 60FA		mov r0, #2000 ; 2000
3000045E  F8DF 72D4		ldr r7, [pc, #+724] ; 0x24002C18
30000462  6038     		str r0, [r7]

#96			CAL		SHUTDOWN_RESET {R:9$14}
(*) UDINT
30000464  E92D 0021		stmdb sp!, { r0, r5 }
30000468  F8DF 52C0		ldr r5, [pc, #+704] ; 0x24002C10
3000046C  F8DF 4350		ldr r4, [pc, #+848] ; 0x3000014C
30000470  F044 0401		orr r4, r4, #1
30000474  47A0     		blx r4
30000476  E8BD 0021		ldmia sp!, { r0, r5 }

#97			LD		SHUTDOWN_RESET.Q {R:9$14}
(*) UNDEF
3000047A  F8DF 72BC		ldr r7, [pc, #+700] ; 0x24002C1C
3000047E  7838     		ldrb r0, [r7]

#98			R		WARN_LED {R:9$2}
(*) BOOL
30000480  2800     		cmp r0, #0
30000482  D009     		beq #0x000012
30000484  B082     		sub sp, sp, #8
30000486  F8CD 0000		str r0, [sp]
3000048A  2000     		mov r0, #0
3000048C  F8DF 72E8		ldr r7, [pc, #+744] ; 0x2403D742
30000490  7038     		strb r0, [r7]
30000492  F8DD 0000		ldr r0, [sp]
30000496  B002     		add sp, sp, #8

#99			R		WARN_LIGHT {R:9$3}
(*) BOOL
30000498  2800     		cmp r0, #0
3000049A  D009     		beq #0x000012
3000049C  B082     		sub sp, sp, #8
3000049E  F8CD 0000		str r0, [sp]
300004A2  2000     		mov r0, #0
300004A4  F8DF 730C		ldr r7, [pc, #+780] ; 0x2403D75B
300004A8  7038     		strb r0, [r7]
300004AA  F8DD 0000		ldr r0, [sp]
300004AE  B002     		add sp, sp, #8

#100			R		MOTOR_OL_FAULT {R:9$6}
(*) BOOL
300004B0  2800     		cmp r0, #0
300004B2  D009     		beq #0x000012
300004B4  B082     		sub sp, sp, #8
300004B6  F8CD 0000		str r0, [sp]
300004BA  2000     		mov r0, #0
300004BC  F8DF 7220		ldr r7, [pc, #+544] ; 0x24002BCC
300004C0  7038     		strb r0, [r7]
300004C2  F8DD 0000		ldr r0, [sp]
300004C6  B002     		add sp, sp, #8

#101			R		LOW_OIL_FAULT {R:9$7}
(*) BOOL
300004C8  2800     		cmp r0, #0
300004CA  D009     		beq #0x000012
300004CC  B082     		sub sp, sp, #8
300004CE  F8CD 0000		str r0, [sp]
300004D2  2000     		mov r0, #0
300004D4  F8DF 7200		ldr r7, [pc, #+512] ; 0x24002BC6
300004D8  7038     		strb r0, [r7]
300004DA  F8DD 0000		ldr r0, [sp]
300004DE  B002     		add sp, sp, #8

#102			R		MOTOR_TEMP_FAULT {R:9$9}
(*) BOOL
300004E0  2800     		cmp r0, #0
300004E2  D009     		beq #0x000012
300004E4  B082     		sub sp, sp, #8
300004E6  F8CD 0000		str r0, [sp]
300004EA  2000     		mov r0, #0
300004EC  F8DF 71F4		ldr r7, [pc, #+500] ; 0x24002BCD
300004F0  7038     		strb r0, [r7]
300004F2  F8DD 0000		ldr r0, [sp]
300004F6  B002     		add sp, sp, #8

#103			R		E_STOP_FAULT {R:9$10}
(*) BOOL
300004F8  2800     		cmp r0, #0
300004FA  D009     		beq #0x000012
300004FC  B082     		sub sp, sp, #8
300004FE  F8CD 0000		str r0, [sp]
30000502  2000     		mov r0, #0
30000504  F8DF 7208		ldr r7, [pc, #+520] ; 0x24002BF9
30000508  7038     		strb r0, [r7]
3000050A  F8DD 0000		ldr r0, [sp]
3000050E  B002     		add sp, sp, #8

#104			R		FAULT_LED {R:9$11}
(*) BOOL
30000510  2800     		cmp r0, #0
30000512  D009     		beq #0x000012
30000514  B082     		sub sp, sp, #8
30000516  F8CD 0000		str r0, [sp]
3000051A  2000     		mov r0, #0
3000051C  F8DF 7260		ldr r7, [pc, #+608] ; 0x2403D744
30000520  7038     		strb r0, [r7]
30000522  F8DD 0000		ldr r0, [sp]
30000526  B002     		add sp, sp, #8

#105		 
#106			(* Network 10 *)
#107		At_Pressure_Standby:
#108			LDN		PRESSURE_SENSOR {R:10$2}
(*) UNDEF
30000528  F8DF 726C		ldr r7, [pc, #+620] ; 0x2403D74E
3000052C  7838     		ldrb r0, [r7]
3000052E  2800     		cmp r0, #0
30000530  BF08 2001		eqmov r0, #1
30000534  BF18 2000		nemov r0, #0

#109			ST		MOTOR_STANDBY {R:10$1}
(*) BOOL
30000538  F8DF 71A0		ldr r7, [pc, #+416] ; 0x24002BC7
3000053C  7038     		strb r0, [r7]

#110		 
#111			(* Network 11 *)
#112		Fault_Lighting:
#113			LD		LOW_OIL_FAULT {R:11$0}
(*) UNDEF
3000053E  F8DF 7198		ldr r7, [pc, #+408] ; 0x24002BC6
30000542  7838     		ldrb r0, [r7]

#114			OR		MOTOR_OL_FAULT {R:11$2}
(*) BOOL
30000544  F8DF 7198		ldr r7, [pc, #+408] ; 0x24002BCC
30000548  783F     		ldrb r7, [r7]
3000054A  4338     		orr r0, r0, r7

#115			OR		MOTOR_TEMP_FAULT {R:11$4}
(*) BOOL
3000054C  F8DF 7194		ldr r7, [pc, #+404] ; 0x24002BCD
30000550  783F     		ldrb r7, [r7]
30000552  4338     		orr r0, r0, r7

#116			ORN		EMERGENCY_STOP {R:11$40}
(*) BOOL
30000554  F8DF 723C		ldr r7, [pc, #+572] ; 0x2403D74C
30000558  783F     		ldrb r7, [r7]
3000055A  2F00     		cmp r7, #0
3000055C  BF08 2701		eqmov r7, #1
30000560  BF18 2700		nemov r7, #0
30000564  4338     		orr r0, r0, r7

#117			ST		WARN_LED {R:11$1}
(*) BOOL
30000566  F8DF 7210		ldr r7, [pc, #+528] ; 0x2403D742
3000056A  7038     		strb r0, [r7]

#118			ST		WARN_LIGHT {R:11$7}
(*) BOOL
3000056C  F8DF 7244		ldr r7, [pc, #+580] ; 0x2403D75B
30000570  7038     		strb r0, [r7]

#119			ST		FAULT_MODE {R:11$47}
(*) BOOL
30000572  F8DF 71A4		ldr r7, [pc, #+420] ; 0x24002BFB
30000576  7038     		strb r0, [r7]

#120		 
#121			(* Network 12 *)
#122			LD		WARN_LIGHT {R:12$0}
(*) UNDEF
30000578  F8DF 7238		ldr r7, [pc, #+568] ; 0x2403D75B
3000057C  7838     		ldrb r0, [r7]

#123			ST		WARN_LED {R:12$1}
(*) BOOL
3000057E  F8DF 71F8		ldr r7, [pc, #+504] ; 0x2403D742
30000582  7038     		strb r0, [r7]

#124		 
#125			(* Network 13 *)
#126			LD		WARN_BUZZ {R:13$0}
(*) UNDEF
30000584  F8DF 7230		ldr r7, [pc, #+560] ; 0x2403D75C
30000588  7838     		ldrb r0, [r7]

#127			ST		BUZZ_LED {R:13$1}
(*) BOOL
3000058A  F8DF 71F0		ldr r7, [pc, #+496] ; 0x2403D743
3000058E  7038     		strb r0, [r7]

#128		 
#129			(* Network 14 *)
#130			LD		MOTOR {R:14$0}
(*) UNDEF
30000590  F8DF 7218		ldr r7, [pc, #+536] ; 0x2403D759
30000594  7838     		ldrb r0, [r7]

#131			ST		MOTOR_LED {R:14$1}
(*) BOOL
30000596  F8DF 71D8		ldr r7, [pc, #+472] ; 0x2403D740
3000059A  7038     		strb r0, [r7]

#132			ST		OK_LED {R:14$2}
(*) BOOL
3000059C  F8DF 71E4		ldr r7, [pc, #+484] ; 0x2403D745
300005A0  7038     		strb r0, [r7]

#133		 
#134			(* Network 15 *)
#135			LD		ACD {R:15$0}
(*) UNDEF
300005A2  F8DF 720C		ldr r7, [pc, #+524] ; 0x2403D75A
300005A6  7838     		ldrb r0, [r7]

#136			ST		ACD_LED {R:15$1}
(*) BOOL
300005A8  F8DF 71C8		ldr r7, [pc, #+456] ; 0x2403D741
300005AC  7038     		strb r0, [r7]

#137		 
#138			(* Network 16 *)
#139			LD		MOTOR_STANDBY {R:16$0}
(*) UNDEF
300005AE  F8DF 712C		ldr r7, [pc, #+300] ; 0x24002BC7
300005B2  7838     		ldrb r0, [r7]

#140			ST		STANDBY_LED {R:16$1}
(*) BOOL
300005B4  F8DF 71D0		ldr r7, [pc, #+464] ; 0x2403D746
300005B8  7038     		strb r0, [r7]

#141		 
#142			(* Network 17 *)
#143		Fault_Code_On:
#144			LD		FAULT_MODE {R:17$15}
(*) UNDEF
300005BA  F8DF 715C		ldr r7, [pc, #+348] ; 0x24002BFB
300005BE  7838     		ldrb r0, [r7]

#145			AND		FLASH {R:17$0}
(*) BOOL
300005C0  F8DF 7150		ldr r7, [pc, #+336] ; 0x24002BFA
300005C4  783F     		ldrb r7, [r7]
300005C6  4038     		and r0, r0, r7

#146			ST		FLASHER.IN {R:17$8}
(*) BOOL
300005C8  F8DF 7174		ldr r7, [pc, #+372] ; 0x24002C28
300005CC  7038     		strb r0, [r7]

#147			MOVE		BLINK_RATE,FLASHER.PT {R:17$8}
(*) BOOL
300005CE  F8DF 7118		ldr r7, [pc, #+280] ; 0x24002BCE
300005D2  8838     		ldrh r0, [r7]
300005D4  F8DF 716C		ldr r7, [pc, #+364] ; 0x24002C2C
300005D8  6038     		str r0, [r7]

#148			CAL		FLASHER {R:17$8}
(*) UDINT
300005DA  E92D 0021		stmdb sp!, { r0, r5 }
300005DE  F8DF 515C		ldr r5, [pc, #+348] ; 0x24002C24
300005E2  F8DF 41DC		ldr r4, [pc, #+476] ; 0x3000014C
300005E6  F044 0401		orr r4, r4, #1
300005EA  47A0     		blx r4
300005EC  E8BD 0021		ldmia sp!, { r0, r5 }

#149			LD		FLASHER.Q {R:17$8}
(*) UNDEF
300005F0  F8DF 7154		ldr r7, [pc, #+340] ; 0x24002C30
300005F4  7838     		ldrb r0, [r7]

#150			ST		FLASH {R:17$1}
(*) BOOL
300005F6  F8DF 711C		ldr r7, [pc, #+284] ; 0x24002BFA
300005FA  7038     		strb r0, [r7]

#151			R		FAULT_LED {R:17$14}
(*) BOOL
300005FC  2800     		cmp r0, #0
300005FE  D009     		beq #0x000012
30000600  B082     		sub sp, sp, #8
30000602  F8CD 0000		str r0, [sp]
30000606  2000     		mov r0, #0
30000608  F8DF 7174		ldr r7, [pc, #+372] ; 0x2403D744
3000060C  7038     		strb r0, [r7]
3000060E  F8DD 0000		ldr r0, [sp]
30000612  B002     		add sp, sp, #8

#152		 
#153			(* Network 18 *)
#154		Fault_Code_Off:
#155			LD		FAULT_MODE {R:18$37}
(*) UNDEF
30000614  F8DF 7100		ldr r7, [pc, #+256] ; 0x24002BFB
30000618  7838     		ldrb r0, [r7]

#156			ANDN		FLASH {R:18$9}
(*) BOOL
3000061A  F8DF 70F8		ldr r7, [pc, #+248] ; 0x24002BFA
3000061E  783F     		ldrb r7, [r7]
30000620  2F00     		cmp r7, #0
30000622  BF08 2701		eqmov r7, #1
30000626  BF18 2700		nemov r7, #0
3000062A  4038     		and r0, r0, r7

#157			ST		$$VAR$1
(*) BOOL
3000062C  F8DF 70DC		ldr r7, [pc, #+220] ; 0x24002BF8
30000630  7038     		strb r0, [r7]

#158			JMPCN	$$LAB$5
(-) BOOL
30000632  2800     		cmp r0, #0
30000634  D017     		beq #46 ; 0x30000666


#159			LD		BLINK_RATE {R:18$41}
(*) UNDEF
30000638  F8DF 70AC		ldr r7, [pc, #+172] ; 0x24002BCE
3000063C  8838     		ldrh r0, [r7]

#160			DIV	10 {R:18$39}
(*) UINT
3000063E  270A     		mov r7, #10 ; 10
30000640  B082     		sub sp, sp, #8
30000642  F8CD 1000		str r1, [sp]
30000646  4639     		mov r1, r7
30000648  FBB0 F0F1		udiv r0, r0, r1
3000064C  F8DD 1000		ldr r1, [sp]
30000650  B002     		add sp, sp, #8

#161			ST		BLINKOFF_RATE {R:18$43}
(*) UINT
30000652  F8DF 7108		ldr r7, [pc, #+264] ; 0x24002C4E
30000656  B082     		sub sp, sp, #8
30000658  F8CD 0000		str r0, [sp]
3000065C  B200     		sxth r0, r0
3000065E  8038     		strh r0, [r7]
30000660  F8DD 0000		ldr r0, [sp]
30000664  B002     		add sp, sp, #8

#162		$$LAB$5:
#163			LD		$$VAR$1
(*) UNDEF
30000666  F8DF 70A4		ldr r7, [pc, #+164] ; 0x24002BF8
3000066A  7838     		ldrb r0, [r7]

#164			ST		FLASHER_OFF.IN {R:18$27}
(*) BOOL
3000066C  F8DF 70E0		ldr r7, [pc, #+224] ; 0x24002C3C
30000670  7038     		strb r0, [r7]

#165			MOVE		BLINKOFF_RATE,FLASHER_OFF.PT {R:18$27}
(*) BOOL
30000672  F8DF 70E8		ldr r7, [pc, #+232] ; 0x24002C4E
30000676  F9B7 0000		ldrsh r0, [r7]
3000067A  F8DF 70D8		ldr r7, [pc, #+216] ; 0x24002C40
3000067E  6038     		str r0, [r7]

#166			CAL		FLASHER_OFF {R:18$27}
(*) UDINT
30000680  E92D 0021		stmdb sp!, { r0, r5 }
30000684  F8DF 50C4		ldr r5, [pc, #+196] ; 0x24002C38
30000688  F8DF 4134		ldr r4, [pc, #+308] ; 0x3000014C
3000068C  F044 0401		orr r4, r4, #1
30000690  47A0     		blx r4
30000692  E8BD 0021		ldmia sp!, { r0, r5 }

#167			LD		FLASHER_OFF.Q {R:18$27}
(*) UNDEF
30000696  F8DF 70C0		ldr r7, [pc, #+192] ; 0x24002C44
3000069A  7838     		ldrb r0, [r7]

#168			ST		FLASH {R:18$1}
(*) BOOL
3000069C  F8DF 7074		ldr r7, [pc, #+116] ; 0x24002BFA
300006A0  7038     		strb r0, [r7]

#169			S		FAULT_LED {R:18$36}
(*) BOOL
300006A2  2800     		cmp r0, #0
300006A4  D009     		beq #0x000012
300006A6  B082     		sub sp, sp, #8
300006A8  F8CD 0000		str r0, [sp]
300006AC  2001     		mov r0, #1
300006AE  F8DF 70D0		ldr r7, [pc, #+208] ; 0x2403D744
300006B2  7038     		strb r0, [r7]
300006B4  F8DD 0000		ldr r0, [sp]
300006B8  B002     		add sp, sp, #8

300006BA  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
300006BE  F8DD E000		ldr lr, [sp]
300006C2  B002     		add sp, sp, #8

300006C4  4770     		bx lr

300006C8  00001388		; 0x00001388
300006CC  00002710		; 0x00002710
300006D0  00007530		; 0x00007530
300006D4  000493E0		; 0x000493E0
300006D8  24002BC6		; 0x24002BC6
300006DC  24002BC7		; 0x24002BC7
300006E0  24002BCC		; 0x24002BCC
300006E4  24002BCD		; 0x24002BCD
300006E8  24002BCE		; 0x24002BCE
300006EC  24002BD0		; 0x24002BD0
300006F0  24002BD4		; 0x24002BD4
300006F4  24002BD8		; 0x24002BD8
300006F8  24002BDC		; 0x24002BDC
300006FC  24002BE4		; 0x24002BE4
30000700  24002BE8		; 0x24002BE8
30000704  24002BEC		; 0x24002BEC
30000708  24002BF0		; 0x24002BF0
3000070C  24002BF8		; 0x24002BF8
30000710  24002BF9		; 0x24002BF9
30000714  24002BFA		; 0x24002BFA
30000718  24002BFB		; 0x24002BFB
3000071C  24002BFC		; 0x24002BFC
30000720  24002C00		; 0x24002C00
30000724  24002C04		; 0x24002C04
30000728  24002C08		; 0x24002C08
3000072C  24002C10		; 0x24002C10
30000730  24002C14		; 0x24002C14
30000734  24002C18		; 0x24002C18
30000738  24002C1C		; 0x24002C1C
3000073C  24002C24		; 0x24002C24
30000740  24002C28		; 0x24002C28
30000744  24002C2C		; 0x24002C2C
30000748  24002C30		; 0x24002C30
3000074C  24002C38		; 0x24002C38
30000750  24002C3C		; 0x24002C3C
30000754  24002C40		; 0x24002C40
30000758  24002C44		; 0x24002C44
3000075C  24002C4E		; 0x24002C4E
30000760  24002C64		; 0x24002C64
30000764  24002C68		; 0x24002C68
30000768  24002C6C		; 0x24002C6C
3000076C  24002C70		; 0x24002C70
30000770  FFFFFFFF		; 0x2403D740
30000774  FFFFFFFF		; 0x2403D741
30000778  FFFFFFFF		; 0x2403D742
3000077C  FFFFFFFF		; 0x2403D743
30000780  FFFFFFFF		; 0x2403D744
30000784  FFFFFFFF		; 0x2403D745
30000788  FFFFFFFF		; 0x2403D746
3000078C  FFFFFFFF		; 0x2403D748
30000790  FFFFFFFF		; 0x2403D74A
30000794  FFFFFFFF		; 0x2403D74C
30000798  FFFFFFFF		; 0x2403D74E
3000079C  FFFFFFFF		; 0x2403D750
300007A0  FFFFFFFF		; 0x2403D752
300007A4  FFFFFFFF		; 0x2403D754
300007A8  FFFFFFFF		; 0x2403D758
300007AC  FFFFFFFF		; 0x2403D759
300007B0  FFFFFFFF		; 0x2403D75A
300007B4  FFFFFFFF		; 0x2403D75B
300007B8  FFFFFFFF		; 0x2403D75C
300007BC  300000C8		; 0x300000C8
300007C0  3000014C		; 0x3000014C

END_PROGRAM


**************************************************
	Target variable image generation
**************************************************


*** INPUT:
300007C4  4770     		bx lr


*** OUTPUT:
300007C6  4770     		bx lr



**************************************************
	Task Fast init code
**************************************************

300007C8  B082     		sub sp, sp, #8
300007CA  F8CD E000		str lr, [sp]
300007CE  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

300007D2  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
300007D6  F8DD E000		ldr lr, [sp]
300007DA  B002     		add sp, sp, #8

300007DC  4770     		bx lr

**************************************************
	List program: InitParDB
**************************************************

PROGRAM InitParDB

        VAR
warningsKiller : USINT;
dummyCrc32 : UDINT;
	END_VAR

END_PROGRAM

300007F0  B082     		sub sp, sp, #8
300007F2  F8CD E000		str lr, [sp]
300007F6  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

#0		{SRC:InitParDB}
#1		(*$WAITSWITCH$*)
#2		
#3			(* dummyCrc32 := 0; *)
#4			MOVE		0,dummyCrc32	{LNXT:3|5|-1}
(*) UDINT
300007FA  2000     		mov r0, #0 ; 0
300007FC  F8DF 7058		ldr r7, [pc, #+88] ; 0x24002BC8
30000800  6038     		str r0, [r7]

#5		
#6			(* warningsKiller := sysDBase_SetExtTable( TO_DWORD( 0 ), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ); *)
#7			LDP0		0	{LNXT:5|3|-1}
(-) UDINT
#8			TO_DWORD	{LNXT:5|3|-1}
(-) USINT
30000802  2000     		mov r0, #0 ; 0

#9			sysDBase_SetExtTable		0, 0, 0, 0, 0, 0, 0, 0, 0, 0	{LNXT:5|3|-1}
(*) DWORD
30000804  B088     		sub sp, sp, #32
30000806  2700     		mov r7, #0 ; 0
30000808  4639     		mov r1, r7
3000080A  2700     		mov r7, #0 ; 0
3000080C  463A     		mov r2, r7
3000080E  2700     		mov r7, #0 ; 0
30000810  463B     		mov r3, r7
30000812  2700     		mov r7, #0 ; 0
30000814  F8CD 7000		str r7, [sp]
30000818  2700     		mov r7, #0 ; 0
3000081A  F8CD 7004		str r7, [sp, #+4]
3000081E  2700     		mov r7, #0 ; 0
30000820  F8CD 7008		str r7, [sp, #+8]
30000824  2700     		mov r7, #0 ; 0
30000826  F8CD 700C		str r7, [sp, #+12]
3000082A  2700     		mov r7, #0 ; 0
3000082C  F8CD 7010		str r7, [sp, #+16]
30000830  2700     		mov r7, #0 ; 0
30000832  F8CD 7014		str r7, [sp, #+20]
30000836  2700     		mov r7, #0 ; 0
30000838  F8CD 7018		str r7, [sp, #+24]
3000083C  F8DF 4010		ldr r4, [pc, #+16] ; 0x806BE21
30000840  F044 0401		orr r4, r4, #1
30000844  47A0     		blx r4
30000846  B008     		add sp, sp, #32

#10			ST		warningsKiller	{LNXT:5|3|-1}
(*) USINT
30000848  F8DF 7008		ldr r7, [pc, #+8] ; 0x24002BC5
3000084C  7038     		strb r0, [r7]

3000084E  E005     		b #10

30000850  FFFFFFFF		; 0x0806BE21
30000854  24002BC5		; 0x24002BC5
30000858  24002BC8		; 0x24002BC8

END_PROGRAM
**************************************************
	List program: $$IOConfig
**************************************************

PROGRAM $$IOConfig

        VAR
warningsKiller : BOOL;
	END_VAR

END_PROGRAM

#0		{SRC:$$IOConfig}
#1		(*$WAITSWITCH$*)
#2		
#3			(* warningsKiller := sysCfgAnalogRes(16); *)
#4			LDP0		16	{LNXT:4|7|-1}
(-) UDINT
#5			sysCfgAnalogRes	{LNXT:4|7|-1}
(*) USINT
3000085C  2010     		mov r0, #16 ; 16
3000085E  F8DF 40BC		ldr r4, [pc, #+188] ; 0x8072BD1
30000862  F044 0401		orr r4, r4, #1
30000866  47A0     		blx r4

#6			ST		warningsKiller	{LNXT:4|7|-1}
(*) BOOL
30000868  F8DF 70B8		ldr r7, [pc, #+184] ; 0x24002BC4
3000086C  7038     		strb r0, [r7]

#7		
#8			(* warningsKiller := sysCfgProgInput(0, 0); *)
#9			LDP0		0	{LNXT:7|8|-1}
(-) BOOL
#10			sysCfgProgInput		0	{LNXT:7|8|-1}
(*) USINT
3000086E  2000     		mov r0, #0 ; 0
30000870  2100     		mov r1, #0 ; 0
30000872  F8DF 40AC		ldr r4, [pc, #+172] ; 0x8072BDD
30000876  F044 0401		orr r4, r4, #1
3000087A  47A0     		blx r4

#11			ST		warningsKiller	{LNXT:7|8|-1}
(*) BOOL
3000087C  F8DF 70A4		ldr r7, [pc, #+164] ; 0x24002BC4
30000880  7038     		strb r0, [r7]

#12		
#13			(* warningsKiller := sysCfgProgInput(1, 0); *)
#14			LDP0		1	{LNXT:8|9|-1}
(-) BOOL
#15			sysCfgProgInput		0	{LNXT:8|9|-1}
(*) USINT
30000882  2001     		mov r0, #1 ; 1
30000884  2100     		mov r1, #0 ; 0
30000886  F8DF 4098		ldr r4, [pc, #+152] ; 0x8072BDD
3000088A  F044 0401		orr r4, r4, #1
3000088E  47A0     		blx r4

#16			ST		warningsKiller	{LNXT:8|9|-1}
(*) BOOL
30000890  F8DF 7090		ldr r7, [pc, #+144] ; 0x24002BC4
30000894  7038     		strb r0, [r7]

#17		
#18			(* warningsKiller := sysCfgProgInput(2, 0); *)
#19			LDP0		2	{LNXT:9|10|-1}
(-) BOOL
#20			sysCfgProgInput		0	{LNXT:9|10|-1}
(*) USINT
30000896  2002     		mov r0, #2 ; 2
30000898  2100     		mov r1, #0 ; 0
3000089A  F8DF 4084		ldr r4, [pc, #+132] ; 0x8072BDD
3000089E  F044 0401		orr r4, r4, #1
300008A2  47A0     		blx r4

#21			ST		warningsKiller	{LNXT:9|10|-1}
(*) BOOL
300008A4  F8DF 707C		ldr r7, [pc, #+124] ; 0x24002BC4
300008A8  7038     		strb r0, [r7]

#22		
#23			(* warningsKiller := sysCfgProgInput(3, 0); *)
#24			LDP0		3	{LNXT:10|11|-1}
(-) BOOL
#25			sysCfgProgInput		0	{LNXT:10|11|-1}
(*) USINT
300008AA  2003     		mov r0, #3 ; 3
300008AC  2100     		mov r1, #0 ; 0
300008AE  F8DF 4070		ldr r4, [pc, #+112] ; 0x8072BDD
300008B2  F044 0401		orr r4, r4, #1
300008B6  47A0     		blx r4

#26			ST		warningsKiller	{LNXT:10|11|-1}
(*) BOOL
300008B8  F8DF 7068		ldr r7, [pc, #+104] ; 0x24002BC4
300008BC  7038     		strb r0, [r7]

#27		
#28			(* warningsKiller := sysCfgProgInput(4, 0); *)
#29			LDP0		4	{LNXT:11|12|-1}
(-) BOOL
#30			sysCfgProgInput		0	{LNXT:11|12|-1}
(*) USINT
300008BE  2004     		mov r0, #4 ; 4
300008C0  2100     		mov r1, #0 ; 0
300008C2  F8DF 405C		ldr r4, [pc, #+92] ; 0x8072BDD
300008C6  F044 0401		orr r4, r4, #1
300008CA  47A0     		blx r4

#31			ST		warningsKiller	{LNXT:11|12|-1}
(*) BOOL
300008CC  F8DF 7054		ldr r7, [pc, #+84] ; 0x24002BC4
300008D0  7038     		strb r0, [r7]

#32		
#33			(* warningsKiller := sysCfgProgInput(5, 0); *)
#34			LDP0		5	{LNXT:12|13|-1}
(-) BOOL
#35			sysCfgProgInput		0	{LNXT:12|13|-1}
(*) USINT
300008D2  2005     		mov r0, #5 ; 5
300008D4  2100     		mov r1, #0 ; 0
300008D6  F8DF 4048		ldr r4, [pc, #+72] ; 0x8072BDD
300008DA  F044 0401		orr r4, r4, #1
300008DE  47A0     		blx r4

#36			ST		warningsKiller	{LNXT:12|13|-1}
(*) BOOL
300008E0  F8DF 7040		ldr r7, [pc, #+64] ; 0x24002BC4
300008E4  7038     		strb r0, [r7]

#37		
#38			(* warningsKiller := sysCfgProgInput(6, 0); *)
#39			LDP0		6	{LNXT:13|14|-1}
(-) BOOL
#40			sysCfgProgInput		0	{LNXT:13|14|-1}
(*) USINT
300008E6  2006     		mov r0, #6 ; 6
300008E8  2100     		mov r1, #0 ; 0
300008EA  F8DF 4034		ldr r4, [pc, #+52] ; 0x8072BDD
300008EE  F044 0401		orr r4, r4, #1
300008F2  47A0     		blx r4

#41			ST		warningsKiller	{LNXT:13|14|-1}
(*) BOOL
300008F4  F8DF 702C		ldr r7, [pc, #+44] ; 0x24002BC4
300008F8  7038     		strb r0, [r7]

#42		
#43			(* warningsKiller := sysCfgProgInput(7, 0); *)
#44			LDP0		7	{LNXT:14|4|-1}
(-) BOOL
#45			sysCfgProgInput		0	{LNXT:14|4|-1}
(*) USINT
300008FA  2007     		mov r0, #7 ; 7
300008FC  2100     		mov r1, #0 ; 0
300008FE  F8DF 4020		ldr r4, [pc, #+32] ; 0x8072BDD
30000902  F044 0401		orr r4, r4, #1
30000906  47A0     		blx r4

#46			ST		warningsKiller	{LNXT:14|4|-1}
(*) BOOL
30000908  F8DF 7018		ldr r7, [pc, #+24] ; 0x24002BC4
3000090C  7038     		strb r0, [r7]

3000090E  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
30000912  F8DD E000		ldr lr, [sp]
30000916  B002     		add sp, sp, #8

30000918  4770     		bx lr

3000091C  FFFFFFFF		; 0x08072BD1
30000920  FFFFFFFF		; 0x08072BDD
30000924  24002BC4		; 0x24002BC4

END_PROGRAM


**************************************************
	Target variable image generation
**************************************************


*** INPUT:
30000928  4770     		bx lr


*** OUTPUT:
3000092A  4770     		bx lr



**************************************************
	Task Init init code
**************************************************

3000092C  B082     		sub sp, sp, #8
3000092E  F8CD E000		str lr, [sp]
30000932  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

30000936  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
3000093A  F8DD E000		ldr lr, [sp]
3000093E  B002     		add sp, sp, #8

30000940  4770     		bx lr



**************************************************
	Global init code
**************************************************

30000950  B082     		sub sp, sp, #8
30000952  F8CD E000		str lr, [sp]
30000956  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

3000095A  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
3000095E  F8DD E000		ldr lr, [sp]
30000962  B002     		add sp, sp, #8

30000964  4770     		bx lr



**************************************************
	Global RETAIN init code
**************************************************

30000966  B082     		sub sp, sp, #8
30000968  F8CD E000		str lr, [sp]
3000096C  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

30000970  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
30000974  F8DD E000		ldr lr, [sp]
30000978  B002     		add sp, sp, #8

3000097A  4770     		bx lr



**************************************************
	Task $$VirtualTables init code
**************************************************

3000097C  B082     		sub sp, sp, #8
3000097E  F8CD E000		str lr, [sp]
30000982  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

30000986  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
3000098A  F8DD E000		ldr lr, [sp]
3000098E  B002     		add sp, sp, #8

30000990  4770     		bx lr



********************************************
MEMORY MAP
********************************************

Code area type:          		       main code
Start code area:          		0000000030000000h
End code area:            		0000000030000BB4h
Code size:                		00000BB4h

Start local data area:    		0000000024002BB8h
End local data area:      		0000000024002C78h
Local data size:          		000000C0h

Start retentive data area:		00000000240027B8h
End retentive data area:  		00000000240027B8h
Retentive data size:      		00000000h

Start bit data area:      		0000000000000000h
End bit data area:        		0000000000000000h
Bit data size:            		00000000h



********************************************
CODE ID:                                C2B074CA
DEBUG MEMO ID:                          300058B3
FULL MEMO ID:                           0000C710
********************************************
